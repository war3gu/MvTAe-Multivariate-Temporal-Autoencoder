

loss = loss_decoder + loss_alpha   增加weight，看看能否调参，使得test的效果更好

超参数可配置化，然后看看哪个组合最好

是否可以loss长时间无明显变化后，epoch自动退出


测试复兴和美的等真实股票的效果

把可改变的超参数写入一个类中，直接用全局变量易出问题

考虑把weight_decoder改成一个岁epoch_size变化的值

一开始把loss_alpha的weight设置为0，等loss稳定了之后，在把loss_decoder的weight设置为0

缺少一个判断涨跌正确率的指标

先确定一套超参数是不是训练epoch越多，预测越准确

试试把dropout_p降为0，看看结果是否随着epoch增加稳定优化

我所追求的per_corr与loss并不是一个东西，导致loss降低，per_corr并没有相应的变化

用decoder和不用decoder分别跑一下看看

还是跑000333，把epoch_pass设置为1000看看结果是不是更好

考虑把相关股票同一段时间内的数据搞在一起训练测试


试试把所有避免dropout的超参数都干掉，只留decoder

似乎decoder的权重需要特别小，因为alpha训练到最后会变的非常小，此时decoder成了拖累。把decoder想成防止过拟合项，权重一开始要非常小

似乎dropout与decoder一起用，效果不太好

考虑把decoder的dropout拿掉

既然策略3效果好，跑一下别的股票

简化模型，现在有没有可能是杀鸡用牛刀,跑的太慢了.只要能很快的train overfitting，模型就是足够的

因为跑的太慢，遍历所有股票基本上是不可能的,但是Tesla T4已经能找到的最好gpu了

把每只股票复杂模型都跑一遍似乎不现实，
1.只跑decoder固定次数，把loss最小的重点研究

把decoder跑多次，看看最终误差是否差不多

把多个loss最小的股票组合起来跑，是不是loss更小？

考虑不同的股票组合，看看会不会降低loss

感觉日间数据信息太少了，考虑搞点日内数据分析


当前是train的很好，test不好，下面考虑把dropout和decoder也带上去。 lr大，epoch_pass大应该是没问题的


Wilson 等人的论文结果显示，在对象识别、字符级别建模、语法成分分析等方面，
自适应学习率方法（包括AdaGrad、AdaDelta、RMSProp、Adam等）通常比Momentum算法效果更差。考虑换优化器

epoch_pass 为100似乎就足够，最多200，训练不好，说明超参数有问题,比如lr


感觉日线只所以训练不好，是因为没什么信息是有用的

最后试试lr为0.0001的情况

train数据跑出来为1的模型肯定不好，因为股票数据明显有很多是噪音，都拟合了，会导致test结果不好，我觉得0.75是不错的结果

明天再跑个decoder_weight不为0的情况，看看会不会好点




是不是数据持续时间越长，噪音越大?

分钟数据考虑根据每天给分开，现在是隔天数据也能在一起




搞3个模型判断5分钟，10分钟，30分钟之后的走势，如果都是上涨，说明股票要涨了，可以考虑买入